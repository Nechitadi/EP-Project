FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [scratchpad+222],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [scratchpad+223],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 31 LCALL 0x0331             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 2A    MOV   X,0x2A             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 19    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 19    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 19    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 18    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 19    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 19 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 18    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 18    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 19    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 19 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 18    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 02 MOV   REG[0xE0],0x2      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 09 8E LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
022C: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_tasproject_Bank1
                                        (0019) export LoadConfigTBL_tasproject_Bank0
                                        (0020) export LoadConfigTBL_tasproject_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_tasproject_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Global Register values Bank 0
                                        (0025) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0026) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0027) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0028) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0029) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0030) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0031) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0032) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0033) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0034) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0035) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0036) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0037) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0038) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0039) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0040) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0041) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0042) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0043) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0044) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0045) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0046) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0047) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0048) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0049) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0050) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0051) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0052) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0053) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0054) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0055) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0056) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0057) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0058) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0059) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0060) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0061) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0062) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0063) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0064) 	db		ffh
                                        (0065) LoadConfigTBL_tasproject_Bank1:
                                        (0066) ;  Instance name LCD, User Module LCD
                                        (0067) ;  Global Register values Bank 1
                                        (0068) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0069) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0070) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0071) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0072) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0073) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0074) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0075) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0076) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0077) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0078) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0079) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0080) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0081) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0082) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0083) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0084) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0085) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0086) 	db		ffh
                                        (0087) AREA psoc_config(rom, rel)
                                        (0088) LoadConfigTBL_tasproject_Ordered:
                                        (0089) ;  Ordered Global Register values
                                        (0090) 	M8C_SetBank0
022E: 62 00 00 MOV   REG[0x0],0x0       (0091) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0231: 71 10    OR    F,0x10             
                                        (0092) 	M8C_SetBank1
0233: 62 00 00 MOV   REG[0x0],0x0       (0093) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0236: 62 01 FF MOV   REG[0x1],0xFF      (0094) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0239: 70 EF    AND   F,0xEF             
                                        (0095) 	M8C_SetBank0
023B: 62 03 FF MOV   REG[0x3],0xFF      (0096) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
023E: 62 02 00 MOV   REG[0x2],0x0       (0097) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0241: 71 10    OR    F,0x10             
                                        (0098) 	M8C_SetBank1
0243: 62 02 00 MOV   REG[0x2],0x0       (0099) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0246: 62 03 00 MOV   REG[0x3],0x0       (0100) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0249: 70 EF    AND   F,0xEF             
                                        (0101) 	M8C_SetBank0
024B: 62 01 00 MOV   REG[0x1],0x0       (0102) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
024E: 62 04 00 MOV   REG[0x4],0x0       (0103) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0251: 71 10    OR    F,0x10             
                                        (0104) 	M8C_SetBank1
0253: 62 04 00 MOV   REG[0x4],0x0       (0105) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0256: 62 05 FF MOV   REG[0x5],0xFF      (0106) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0259: 70 EF    AND   F,0xEF             
                                        (0107) 	M8C_SetBank0
025B: 62 07 FF MOV   REG[0x7],0xFF      (0108) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
025E: 62 06 00 MOV   REG[0x6],0x0       (0109) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0261: 71 10    OR    F,0x10             
                                        (0110) 	M8C_SetBank1
0263: 62 06 00 MOV   REG[0x6],0x0       (0111) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0266: 62 07 00 MOV   REG[0x7],0x0       (0112) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0269: 70 EF    AND   F,0xEF             
                                        (0113) 	M8C_SetBank0
026B: 62 05 00 MOV   REG[0x5],0x0       (0114) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
026E: 62 08 80 MOV   REG[0x8],0x80      (0115) 	mov	reg[08h], 80h		; Port_2_Data register (PRT2DR)
0271: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
0273: 62 08 FF MOV   REG[0x8],0xFF      (0117) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0276: 62 09 80 MOV   REG[0x9],0x80      (0118) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0279: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
027B: 62 0B 80 MOV   REG[0xB],0x80      (0120) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
027E: 62 0A 00 MOV   REG[0xA],0x0       (0121) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0281: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
0283: 62 0A 00 MOV   REG[0xA],0x0       (0123) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0286: 62 0B 00 MOV   REG[0xB],0x0       (0124) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0289: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
028B: 62 09 00 MOV   REG[0x9],0x0       (0126) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
028E: 62 0C 00 MOV   REG[0xC],0x0       (0127) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0291: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
0293: 62 0C 00 MOV   REG[0xC],0x0       (0129) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0296: 62 0D 00 MOV   REG[0xD],0x0       (0130) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0299: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
029B: 62 0F 00 MOV   REG[0xF],0x0       (0132) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
029E: 62 0E 00 MOV   REG[0xE],0x0       (0133) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02A1: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
02A3: 62 0E 00 MOV   REG[0xE],0x0       (0135) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02A6: 62 0F 00 MOV   REG[0xF],0x0       (0136) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02A9: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
02AB: 62 0D 00 MOV   REG[0xD],0x0       (0138) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02AE: 62 10 00 MOV   REG[0x10],0x0      (0139) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02B1: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
02B3: 62 10 00 MOV   REG[0x10],0x0      (0141) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02B6: 62 11 00 MOV   REG[0x11],0x0      (0142) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02B9: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
02BB: 62 13 00 MOV   REG[0x13],0x0      (0144) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02BE: 62 12 00 MOV   REG[0x12],0x0      (0145) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02C1: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
02C3: 62 12 00 MOV   REG[0x12],0x0      (0147) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02C6: 62 13 00 MOV   REG[0x13],0x0      (0148) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02C9: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
02CB: 62 11 00 MOV   REG[0x11],0x0      (0150) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02CE: 62 14 00 MOV   REG[0x14],0x0      (0151) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02D1: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
02D3: 62 14 00 MOV   REG[0x14],0x0      (0153) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02D6: 62 15 00 MOV   REG[0x15],0x0      (0154) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02D9: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
02DB: 62 17 00 MOV   REG[0x17],0x0      (0156) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02DE: 62 16 00 MOV   REG[0x16],0x0      (0157) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02E1: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
02E3: 62 16 00 MOV   REG[0x16],0x0      (0159) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02E6: 62 17 00 MOV   REG[0x17],0x0      (0160) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02E9: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
02EB: 62 15 00 MOV   REG[0x15],0x0      (0162) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02EE: 62 18 00 MOV   REG[0x18],0x0      (0163) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02F1: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
02F3: 62 18 00 MOV   REG[0x18],0x0      (0165) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02F6: 62 19 00 MOV   REG[0x19],0x0      (0166) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02F9: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
02FB: 62 1B 00 MOV   REG[0x1B],0x0      (0168) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
02FE: 62 1A 00 MOV   REG[0x1A],0x0      (0169) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0301: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
0303: 62 1A 00 MOV   REG[0x1A],0x0      (0171) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0306: 62 1B 00 MOV   REG[0x1B],0x0      (0172) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0309: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
030B: 62 19 00 MOV   REG[0x19],0x0      (0174) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
030E: 62 1C 00 MOV   REG[0x1C],0x0      (0175) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0311: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
0313: 62 1C 00 MOV   REG[0x1C],0x0      (0177) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0316: 62 1D 00 MOV   REG[0x1D],0x0      (0178) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0319: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
031B: 62 1F 00 MOV   REG[0x1F],0x0      (0180) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
031E: 62 1E 00 MOV   REG[0x1E],0x0      (0181) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0321: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
0323: 62 1E 00 MOV   REG[0x1E],0x0      (0183) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0326: 62 1F 00 MOV   REG[0x1F],0x0      (0184) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0329: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
032B: 62 1D 00 MOV   REG[0x1D],0x0      (0186) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
032E: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
0330: 7F       RET                      (0188) 	ret
                                        (0189) 
                                        (0190) 
                                        (0191) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_tasproject
                                        (0026) export _LoadConfig_tasproject
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0331: 55 00 80 MOV   [index],0x80       (0065) 	mov		[Port_2_Data_SHADE], 80h
0334: 55 01 FF MOV   [index+1],0xFF     (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0337: 55 02 80 MOV   [index+2],0x80     (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
033A: 7C 03 41 LCALL 0x0341             (0069) 	lcall	LoadConfig_tasproject
033D: 7C 02 2C LCALL 0x022C             (0070) 	lcall	LoadConfigTBL_tasproject_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0340: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration tasproject
                                        (0078) ;
                                        (0079) ;    Load configuration registers for tasproject.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_tasproject:
                                        (0096)  LoadConfig_tasproject:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0341: 10       PUSH  X                  (0099) 	push	x
0342: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0344: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0346: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0347: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_tasproject_Bank0
0349: 57 B6    MOV   X,0xB6             (0105)     mov     X, <LoadConfigTBL_tasproject_Bank0
034B: 7C 03 5C LCALL 0x035C             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
034E: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0350: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0351: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_tasproject_Bank1
0353: 57 05    MOV   X,0x5              (0112)     mov     X, <LoadConfigTBL_tasproject_Bank1
0355: 7C 03 5C LCALL 0x035C             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0358: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
035A: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
035B: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
035C: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
035E: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
035F: 08       PUSH  A                  (0143)     push    A
0360: 4F       MOV   X,SP               (0144)     mov     X, SP
0361: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0364: D0 04    JNC   0x0369             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0366: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0369: 18       POP   A                  (0149)     pop     A
036A: 20       POP   X                  (0150)     pop     X
036B: 70 EF    AND   F,0xEF             
036D: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0370: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0371: 08       PUSH  A                  (0156)     push    A
0372: 28       ROMX                     (0157)     romx                            ; Load register address from table
0373: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0375: A0 1F    JZ    0x0395             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0377: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0378: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
037B: A0 03    JZ    0x037F             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
037D: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
037F: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0381: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0382: 20       POP   X                  (0167)     pop     X
0383: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0384: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0386: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0387: 08       PUSH  A                  (0171)     push    A
0388: 28       ROMX                     (0172)     romx                            ; load config data from the table
0389: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
038A: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
038C: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
038E: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
038F: 20       POP   X                  (0177)     pop     X
0390: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0391: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0393: 8F D7    JMP   0x036B             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0395: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0397: 70 3F    AND   F,0x3F             
0399: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
039B: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
039C: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
039D: 10       PUSH  X                  (0209)     push  X
039E: 28       ROMX                     (0210)     romx                               ; Get character from ROM
039F: B0 04    JNZ   0x03A4             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
03A1: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
03A2: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
03A3: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
03A4: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
03A6: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
03A7: 18       POP   A                  (0220)     pop   A
03A8: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
03A9: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
03AB: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
03AC: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
03BE: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
03BF: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
03C0: 67       ASR   A                  (0262)     asr   A
03C1: 67       ASR   A                  (0263)     asr   A
03C2: 67       ASR   A                  (0264)     asr   A
03C3: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
03C5: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
03C7: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
03C9: 18       POP   A                  (0268)     pop   A                            ; Restore value
03CA: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
03CC: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
03CE: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
03D0: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
03D1: 4B       SWAP  A,X                (0305)     swap  A,X
03D2: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
03D4: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
03D5: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
03D7: 7F       RET                      (0310)     ret
03D8: 70 BF    AND   F,0xBF             
03DA: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
03DC: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
03DE: A0 06    JZ    0x03E5             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
03E0: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
03E2: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
03E3: 8F F8    JMP   0x03DC             (0351)     jmp   .Loop_PrString               ; Go get next character
03E5: 70 3F    AND   F,0x3F             
03E7: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
03E9: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
03EA: 90 65    CALL  0x0451             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
03EC: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
03ED: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
03EE: 67       ASR   A                  (0390)     asr   A
03EF: 67       ASR   A                  (0391)     asr   A
03F0: 67       ASR   A                  (0392)     asr   A
03F1: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
03F3: 90 3B    CALL  0x0430             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
03F5: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
03F6: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
03F8: 40       NOP                      (0397)     nop
03F9: 40       NOP                      (0398)     nop
03FA: 40       NOP                      (0399)     nop
03FB: 90 33    CALL  0x0430             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
03FD: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
03FE: 90 51    CALL  0x0451             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0400: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0401: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0402: 67       ASR   A                  (0436)     asr   A
0403: 67       ASR   A                  (0437)     asr   A
0404: 67       ASR   A                  (0438)     asr   A
0405: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0407: 90 09    CALL  0x0412             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0409: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
040A: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
040C: 40       NOP                      (0443)     nop
040D: 40       NOP                      (0444)     nop
040E: 40       NOP                      (0445)     nop
040F: 90 01    CALL  0x0412             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0411: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0412: 08       PUSH  A                  (0477)     push  A
0413: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0416: 26 00 80 AND   [index],0x80       (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0419: 51 00    MOV   A,[index]          (0480)     mov   A,[Port_2_Data_SHADE]
041B: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
041D: 18       POP   A                  (0483)     pop   A
041E: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0420: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0422: 2A 00    OR    A,[index]          (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0424: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0426: 53 00    MOV   [index],A          (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0428: 40       NOP                      (0489)     nop
0429: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
042B: 53 00    MOV   [index],A          (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
042D: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
042F: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0430: 08       PUSH  A                  (0523)     push  A
0431: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0434: 26 00 80 AND   [index],0x80       (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0437: 2E 00 20 OR    [index],0x20       (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
043A: 51 00    MOV   A,[index]          (0527)     mov   A,[Port_2_Data_SHADE]
043C: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
043E: 18       POP   A                  (0530)     pop   A
043F: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0441: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0443: 2A 00    OR    A,[index]          (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0445: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0447: 53 00    MOV   [index],A          (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0449: 40       NOP                      (0536)     NOP
044A: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
044C: 53 00    MOV   [index],A          (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
044E: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0450: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0451: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0452: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0455: 26 00 80 AND   [index],0x80       (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0458: 51 00    MOV   A,[index]          (0574)     mov   A,[Port_2_Data_SHADE]
045A: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
045C: 26 01 F0 AND   [index+1],0xF0     (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
045F: 51 01    MOV   A,[index+1]        (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0461: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0463: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0465: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0467: 2E 00 40 OR    [index],0x40       (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
046A: 51 00    MOV   A,[index]          (0584)     mov   A,[Port_2_Data_SHADE]
046C: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
046E: 40       NOP                      (0586)     NOP
                                        (0587) 
046F: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0470: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0472: 2E 00 50 OR    [index],0x50       (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0475: 51 00    MOV   A,[index]          (0593)     mov   A,[Port_2_Data_SHADE]
0477: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0479: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
047A: 40       NOP                      (0597)     nop
047B: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
047D: 08       PUSH  A                  (0610)     push  A
047E: 26 00 C0 AND   [index],0xC0       (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0481: 51 00    MOV   A,[index]          (0612)     mov   A,[Port_2_Data_SHADE]
0483: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0485: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0486: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0487: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0488: 2E 00 50 OR    [index],0x50       (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
048B: 51 00    MOV   A,[index]          (0620)     mov   A,[Port_2_Data_SHADE]
048D: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
048F: 40       NOP                      (0623)     nop
0490: 40       NOP                      (0624)     nop
                                        (0625) 
0491: 26 00 C0 AND   [index],0xC0       (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0494: 51 00    MOV   A,[index]          (0627)     mov   A,[Port_2_Data_SHADE]
0496: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0498: 18       POP   A                  (0630)     pop   A
0499: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
049B: A0 04    JZ    0x04A0             (0633)     jz    .UNLOCK
049D: 79       DEC   X                  (0634)     dec   X
049E: BF D3    JNZ   0x0472             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
04A0: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
04A1: 2E 01 7F OR    [index+1],0x7F     (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
04A4: 51 01    MOV   A,[index+1]        (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
04A6: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
04A8: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
04AA: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
04AC: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
04AD: 7F       RET                      (0646)     ret
04AE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
04B1: 26 01 80 AND   [index+1],0x80     (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
04B4: 2E 01 7F OR    [index+1],0x7F     (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
04B7: 26 02 80 AND   [index+2],0x80     (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
04BA: 51 01    MOV   A,[index+1]        (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
04BC: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
04BE: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
04C0: 51 02    MOV   A,[index+2]        (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
04C2: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
04C4: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
04C6: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04C8: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
04CA: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04CC: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
04CE: 50 03    MOV   A,0x3              (0701)     mov   A,03h
04D0: 9F 40    CALL  0x0412             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
04D2: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
04D4: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
04D6: 50 03    MOV   A,0x3              (0707)     mov   A,03h
04D8: 9F 38    CALL  0x0412             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
04DA: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
04DC: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
04DE: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
04E0: 50 03    MOV   A,0x3              (0714)     mov   A,03h
04E2: 9F 2E    CALL  0x0412             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
04E4: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04E6: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
04E8: 50 02    MOV   A,0x2              (0720)     mov   A,02h
04EA: 9F 26    CALL  0x0412             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
04EC: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04EE: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
04F0: 50 08    MOV   A,0x8              (0726)     mov   A,08h
04F2: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
04F4: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04F6: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
04F8: 50 01    MOV   A,0x1              (0731)     mov   A,01h
04FA: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
04FC: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04FE: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0500: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0502: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0504: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0506: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0508: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
050A: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
050C: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
050E: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0510: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0512: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0514: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0516: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0518: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
051A: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
051C: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0521: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0523: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0524: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0526: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0527: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0529: 20       POP   X                  (0795)     pop   X
                                        (0796) 
052A: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
052C: 70 3F    AND   F,0x3F             
052E: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0530: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0531: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0533: 78       DEC   A                  (0828)     dec   A
0534: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0536: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
053F: 08       PUSH  A                  (0871)     push  A
0540: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0542: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0544: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0546: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0548: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
054A: D0 06    JNC   0x0551             (0877)     jnc   .Delay50u_End
054C: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
054E: 78       DEC   A                  (0880)     dec   A                              ; [4]
054F: BF FE    JNZ   0x054E             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0551: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0552: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: D:\ADRIAN~1\TASPRO~1\TASPRO~1\dht22.c
(0001) /*****************************************************************************
(0002) * File Name: dht22.c
(0003) *
(0004) * Version: 1.0
(0005) *
(0006) * Description:
(0007) * DHT22 Library for PSoC 1 - Source file for DHT22 temperature sensing
(0008) *
(0009) * Owner:
(0010) * George MOIS (gicamois@yahoo.com)
(0011) *
(0012) * Hardware Dependency:
(0013) * DHT22 Digital Temperature Sensor 
(0014) *
(0015) * Code Tested With:
(0016) * 1. PSoC Designer 5.2 (SP1) - Build 2551
(0017) * 2. ImageCraft C Compiler
(0018) *
(0019) ******************************************************************************/
(0020) 
(0021) #include "dht22.h"
(0022) #include <LCD.h>
(0023) #include <stdlib.h>
(0024) #include <string.h> 
(0025) 
(0026) /* Byte Array to hold Scratchpad data */
(0027) BYTE scratchpad[SRAMSIZE];
(0028) 
(0029) /* Byte Array to hold LCD display string */
(0030) BYTE lcdString[16];
(0031) 
(0032) void Wait_ms(WORD millis)
(0033) {
__UserModules_end|_Wait_ms|__text_start|_Wait_ms:
  millis               --> X-5
    0553: 10       PUSH  X
    0554: 4F       MOV   X,SP
    0555: 80 0D    JMP   0x0563
(0034) 	while(millis)
(0035) 	{
(0036) 		LCD_Delay50uTimes(20); 
    0557: 10       PUSH  X
    0558: 50 14    MOV   A,0x14
    055A: 7C 05 31 LCALL _LCD_Delay50uTimes
    055D: 20       POP   X
(0037) 		millis--;
    055E: 7B FC    DEC   [X-4]
    0560: 1F FB 00 SBB   [X-5],0x0
(0038) 	}
    0563: 3D FB 00 CMP   [X-5],0x0
    0566: BF F0    JNZ   0x0557
    0568: 3D FC 00 CMP   [X-4],0x0
    056B: BF EB    JNZ   0x0557
    056D: 20       POP   X
    056E: 7F       RET   
(0039) }
(0040) 
(0041) BOOL DHT22_Get_Temp(void)
(0042) {
_DHT22_Get_Temp:
  i                    --> X+10
  index1               --> X+8
  startx               --> X+7
  vercode              --> X+6
  t1                   --> X+5
  t                    --> X+4
  rh1                  --> X+3
  rh                   --> X+2
  index                --> X+0
    056F: 10       PUSH  X
    0570: 4F       MOV   X,SP
    0571: 38 0C    ADD   SP,0xC
(0043) 	unsigned int index;
(0044) 	unsigned int index1;
(0045) 	unsigned int i;
(0046) 	BYTE startx;
(0047) 	BYTE rh;
(0048) 	BYTE rh1;
(0049) 	BYTE t;
(0050) 	BYTE t1;
(0051) 	BYTE vercode;
(0052) 		
(0053) 		//change P2[7] to ODL - 000
(0054) 		PRT2DM0 |= 0x80;
    0573: 71 10    OR    F,0x10
    0575: 43 08 80 OR    REG[0x8],0x80
(0055) 		PRT2DM1 |= 0x80;
    0578: 43 09 80 OR    REG[0x9],0x80
(0056) 		PRT2DM2 |= 0x80;
    057B: 70 CF    AND   F,0xCF
    057D: 43 0B 80 OR    REG[0xB],0x80
(0057) 		
(0058) 		//write 0 to P2[7] for 5ms
(0059) 		PRT2DR &= ~0x80;
    0580: 41 08 7F AND   REG[0x8],0x7F
(0060) 		Wait_ms(7);
    0583: 50 00    MOV   A,0x0
    0585: 08       PUSH  A
    0586: 50 07    MOV   A,0x7
    0588: 08       PUSH  A
    0589: 9F C8    CALL  __UserModules_end|_Wait_ms|__text_start|_Wait_ms
    058B: 38 FE    ADD   SP,0xFE
(0061) 		
(0062) 		//write 1 to P2[7] for 30us
(0063) 		PRT2DR |= 0x80;
    058D: 43 08 80 OR    REG[0x8],0x80
(0064) 		for(index = 0; index < 6; index++);
    0590: 56 01 00 MOV   [X+1],0x0
    0593: 56 00 00 MOV   [X+0],0x0
    0596: 80 06    JMP   0x059D
    0598: 77 01    INC   [X+1]
    059A: 0F 00 00 ADC   [X+0],0x0
    059D: 52 01    MOV   A,[X+1]
    059F: 11 06    SUB   A,0x6
    05A1: 52 00    MOV   A,[X+0]
    05A3: 19 00    SBB   A,0x0
    05A5: CF F2    JC    0x0598
(0065) 		
(0066) 		//change P2[7] to High-Z - input - 010
(0067) 		PRT2DM0 &= ~0x80;
    05A7: 71 10    OR    F,0x10
    05A9: 41 08 7F AND   REG[0x8],0x7F
(0068) 		PRT2DM1 |= 0x80;
    05AC: 43 09 80 OR    REG[0x9],0x80
(0069) 		PRT2DM2 &= ~0x80;
    05AF: 70 CF    AND   F,0xCF
    05B1: 41 0B 7F AND   REG[0xB],0x7F
(0070) 		
(0071) 		//initialize start
(0072) 		startx=0x00;
    05B4: 56 07 00 MOV   [X+7],0x0
(0073) 		
(0074) 		//read from P2[7] start from sensor
(0075) 		
(0076) 		//wait for 50us and read P2[7] 
(0077) 		//it should be 0
(0078) 		LCD_Delay50u();
    05B7: 10       PUSH  X
    05B8: 7C 05 3F LCALL _LCD_Delay50u
    05BB: 20       POP   X
(0079) 		if (~PRT2DR & 0x80){startx |= 0x01;};
    05BC: 5D 08    MOV   A,REG[0x8]
    05BE: 62 D0 00 MOV   REG[0xD0],0x0
    05C1: 73       CPL   A
    05C2: 53 19    MOV   [__r0],A
    05C4: 26 19 80 AND   [__r0],0x80
    05C7: A0 04    JZ    0x05CC
    05C9: 2F 07 01 OR    [X+7],0x1
(0080) 		
(0081) 		//wait for another 50us and read P2[7]
(0082) 		//it should be 1
(0083) 		LCD_Delay50u();
    05CC: 10       PUSH  X
    05CD: 7C 05 3F LCALL _LCD_Delay50u
    05D0: 20       POP   X
(0084) 		if (PRT2DR & 0x80){startx |= 0x02;}
    05D1: 5D 08    MOV   A,REG[0x8]
    05D3: 62 D0 00 MOV   REG[0xD0],0x0
    05D6: 53 19    MOV   [__r0],A
    05D8: 47 19 80 TST   [__r0],0x80
    05DB: A0 04    JZ    0x05E0
    05DD: 2F 07 02 OR    [X+7],0x2
(0085) 		
(0086) 		if (startx==0x03){
    05E0: 3D 07 03 CMP   [X+7],0x3
    05E3: B1 B6    JNZ   0x079A
(0087) 		//while 1 on input stay
(0088) 		//it's the 1 that lasts 80us
(0089) 		//sent from sensor
(0090) 		while((PRT2DR & 0x80)==0x80){};
    05E5: 5D 08    MOV   A,REG[0x8]
    05E7: 62 D0 00 MOV   REG[0xD0],0x0
    05EA: 53 19    MOV   [__r0],A
    05EC: 26 19 80 AND   [__r0],0x80
    05EF: 3C 19 80 CMP   [__r0],0x80
    05F2: AF F2    JZ    0x05E5
(0091) 		for(index = 0; index < 8; index++);
    05F4: 56 01 00 MOV   [X+1],0x0
    05F7: 56 00 00 MOV   [X+0],0x0
    05FA: 80 06    JMP   0x0601
    05FC: 77 01    INC   [X+1]
    05FE: 0F 00 00 ADC   [X+0],0x0
    0601: 52 01    MOV   A,[X+1]
    0603: 11 08    SUB   A,0x8
    0605: 52 00    MOV   A,[X+0]
    0607: 19 00    SBB   A,0x0
    0609: CF F2    JC    0x05FC
(0092) 
(0093) 		//read the MSB BYTE of the RH Value
(0094) 		for(index = 0; index < 8; index++){
    060B: 56 01 00 MOV   [X+1],0x0
    060E: 56 00 00 MOV   [X+0],0x0
    0611: 80 35    JMP   0x0647
(0095) 		//read bit 7
(0096) 		//0 signaling sending of bit
(0097) 		while((PRT2DR & 0x80)==0x00){};
    0613: 5D 08    MOV   A,REG[0x8]
    0615: 62 D0 00 MOV   REG[0xD0],0x0
    0618: 53 19    MOV   [__r0],A
    061A: 47 19 80 TST   [__r0],0x80
    061D: AF F5    JZ    0x0613
(0098) 		//wait for 50 us
(0099) 	    LCD_Delay50u();
    061F: 10       PUSH  X
    0620: 7C 05 3F LCALL _LCD_Delay50u
    0623: 20       POP   X
(0100) 		//shift byte to the left
(0101) 		rh = rh << 1;
    0624: 66 02    ASL   [X+2]
(0102) 	    //read line
(0103) 		if ((PRT2DR & 0x80)==0x80) 
    0626: 5D 08    MOV   A,REG[0x8]
    0628: 62 D0 00 MOV   REG[0xD0],0x0
    062B: 53 19    MOV   [__r0],A
    062D: 26 19 80 AND   [__r0],0x80
    0630: 3C 19 80 CMP   [__r0],0x80
    0633: B0 0B    JNZ   0x063F
(0104) 			{//read 1, wait for another 50us
(0105) 			rh |= 0x01;
    0635: 2F 02 01 OR    [X+2],0x1
(0106) 			LCD_Delay50u();
    0638: 10       PUSH  X
    0639: 7C 05 3F LCALL _LCD_Delay50u
    063C: 20       POP   X
(0107) 			}
    063D: 80 04    JMP   0x0642
(0108) 		else
(0109) 			{//read 0, go to next bit
(0110) 			rh &= ~0x01;
    063F: 27 02 FE AND   [X+2],0xFE
(0111) 			}
(0112) 		}	
    0642: 77 01    INC   [X+1]
    0644: 0F 00 00 ADC   [X+0],0x0
    0647: 52 01    MOV   A,[X+1]
    0649: 11 08    SUB   A,0x8
    064B: 52 00    MOV   A,[X+0]
    064D: 19 00    SBB   A,0x0
    064F: CF C3    JC    0x0613
(0113) 
(0114) 		//read the LSB BYTE of the RH Value
(0115) 		for(index = 0; index < 8; index++){
    0651: 56 01 00 MOV   [X+1],0x0
    0654: 56 00 00 MOV   [X+0],0x0
    0657: 80 35    JMP   0x068D
(0116) 		//read bit 7
(0117) 		//0 signaling sending of bit
(0118) 		while((PRT2DR & 0x80)==0x00){};
    0659: 5D 08    MOV   A,REG[0x8]
    065B: 62 D0 00 MOV   REG[0xD0],0x0
    065E: 53 19    MOV   [__r0],A
    0660: 47 19 80 TST   [__r0],0x80
    0663: AF F5    JZ    0x0659
(0119) 		//wait for 50 us
(0120) 	    LCD_Delay50u();
    0665: 10       PUSH  X
    0666: 7C 05 3F LCALL _LCD_Delay50u
    0669: 20       POP   X
(0121) 		//shift byte to the left
(0122) 		rh1 = rh1 << 1;
    066A: 66 03    ASL   [X+3]
(0123) 	    //read line
(0124) 		if ((PRT2DR & 0x80)==0x80) 
    066C: 5D 08    MOV   A,REG[0x8]
    066E: 62 D0 00 MOV   REG[0xD0],0x0
    0671: 53 19    MOV   [__r0],A
    0673: 26 19 80 AND   [__r0],0x80
    0676: 3C 19 80 CMP   [__r0],0x80
    0679: B0 0B    JNZ   0x0685
(0125) 			{//read 1, wait for another 50us
(0126) 			rh1 |= 0x01;
    067B: 2F 03 01 OR    [X+3],0x1
(0127) 			LCD_Delay50u();
    067E: 10       PUSH  X
    067F: 7C 05 3F LCALL _LCD_Delay50u
    0682: 20       POP   X
(0128) 			}
    0683: 80 04    JMP   0x0688
(0129) 		else
(0130) 			{//read 0, go to next bit
(0131) 			rh1 &= ~0x01;
    0685: 27 03 FE AND   [X+3],0xFE
(0132) 			}
(0133) 		}	
    0688: 77 01    INC   [X+1]
    068A: 0F 00 00 ADC   [X+0],0x0
    068D: 52 01    MOV   A,[X+1]
    068F: 11 08    SUB   A,0x8
    0691: 52 00    MOV   A,[X+0]
    0693: 19 00    SBB   A,0x0
    0695: CF C3    JC    0x0659
(0134) 		
(0135) 		//read the MSB BYTE of the T Value
(0136) 		for(index = 0; index < 8; index++){
    0697: 56 01 00 MOV   [X+1],0x0
    069A: 56 00 00 MOV   [X+0],0x0
    069D: 80 35    JMP   0x06D3
(0137) 		//read bit 7
(0138) 		//0 signaling sending of bit
(0139) 		while((PRT2DR & 0x80)==0x00){};
    069F: 5D 08    MOV   A,REG[0x8]
    06A1: 62 D0 00 MOV   REG[0xD0],0x0
    06A4: 53 19    MOV   [__r0],A
    06A6: 47 19 80 TST   [__r0],0x80
    06A9: AF F5    JZ    0x069F
(0140) 		//wait for 50 us
(0141) 	    LCD_Delay50u();
    06AB: 10       PUSH  X
    06AC: 7C 05 3F LCALL _LCD_Delay50u
    06AF: 20       POP   X
(0142) 		//shift byte to the left
(0143) 		t = t << 1;
    06B0: 66 04    ASL   [X+4]
(0144) 	    //read line
(0145) 		if ((PRT2DR & 0x80)==0x80) 
    06B2: 5D 08    MOV   A,REG[0x8]
    06B4: 62 D0 00 MOV   REG[0xD0],0x0
    06B7: 53 19    MOV   [__r0],A
    06B9: 26 19 80 AND   [__r0],0x80
    06BC: 3C 19 80 CMP   [__r0],0x80
    06BF: B0 0B    JNZ   0x06CB
(0146) 			{//read 1, wait for another 50us
(0147) 			t |= 0x01;
    06C1: 2F 04 01 OR    [X+4],0x1
(0148) 			LCD_Delay50u();
    06C4: 10       PUSH  X
    06C5: 7C 05 3F LCALL _LCD_Delay50u
    06C8: 20       POP   X
(0149) 			}
    06C9: 80 04    JMP   0x06CE
(0150) 		else
(0151) 			{//read 0, go to next bit
(0152) 			t &= ~0x01;
    06CB: 27 04 FE AND   [X+4],0xFE
(0153) 			}
(0154) 		}	
    06CE: 77 01    INC   [X+1]
    06D0: 0F 00 00 ADC   [X+0],0x0
    06D3: 52 01    MOV   A,[X+1]
    06D5: 11 08    SUB   A,0x8
    06D7: 52 00    MOV   A,[X+0]
    06D9: 19 00    SBB   A,0x0
    06DB: CF C3    JC    0x069F
(0155) 		
(0156) 		//read the MSB BYTE of the T Value
(0157) 		for(index = 0; index < 8; index++){
    06DD: 56 01 00 MOV   [X+1],0x0
    06E0: 56 00 00 MOV   [X+0],0x0
    06E3: 80 35    JMP   0x0719
(0158) 		//read bit 7
(0159) 		//0 signaling sending of bit
(0160) 		while((PRT2DR & 0x80)==0x00){};
    06E5: 5D 08    MOV   A,REG[0x8]
    06E7: 62 D0 00 MOV   REG[0xD0],0x0
    06EA: 53 19    MOV   [__r0],A
    06EC: 47 19 80 TST   [__r0],0x80
    06EF: AF F5    JZ    0x06E5
(0161) 		//wait for 50 us
(0162) 	    LCD_Delay50u();
    06F1: 10       PUSH  X
    06F2: 7C 05 3F LCALL _LCD_Delay50u
    06F5: 20       POP   X
(0163) 		//shift byte to the left
(0164) 		t1 = t1 << 1;
    06F6: 66 05    ASL   [X+5]
(0165) 	    //read line
(0166) 		if ((PRT2DR & 0x80)==0x80) 
    06F8: 5D 08    MOV   A,REG[0x8]
    06FA: 62 D0 00 MOV   REG[0xD0],0x0
    06FD: 53 19    MOV   [__r0],A
    06FF: 26 19 80 AND   [__r0],0x80
    0702: 3C 19 80 CMP   [__r0],0x80
    0705: B0 0B    JNZ   0x0711
(0167) 			{//read 1, wait for another 50us
(0168) 			t1 |= 0x01;
    0707: 2F 05 01 OR    [X+5],0x1
(0169) 			LCD_Delay50u();
    070A: 10       PUSH  X
    070B: 7C 05 3F LCALL _LCD_Delay50u
    070E: 20       POP   X
(0170) 			}
    070F: 80 04    JMP   0x0714
(0171) 		else
(0172) 			{//read 0, go to next bit
(0173) 			t1 &= ~0x01;
    0711: 27 05 FE AND   [X+5],0xFE
(0174) 			}
(0175) 		}	
    0714: 77 01    INC   [X+1]
    0716: 0F 00 00 ADC   [X+0],0x0
    0719: 52 01    MOV   A,[X+1]
    071B: 11 08    SUB   A,0x8
    071D: 52 00    MOV   A,[X+0]
    071F: 19 00    SBB   A,0x0
    0721: CF C3    JC    0x06E5
(0176) 		
(0177) 		//read the CRC
(0178) 		for(index = 0; index < 8; index++){
    0723: 56 01 00 MOV   [X+1],0x0
    0726: 56 00 00 MOV   [X+0],0x0
    0729: 80 35    JMP   0x075F
(0179) 		//read bit 7
(0180) 		//0 signaling sending of bit
(0181) 		while((PRT2DR & 0x80)==0x00){};
    072B: 5D 08    MOV   A,REG[0x8]
    072D: 62 D0 00 MOV   REG[0xD0],0x0
    0730: 53 19    MOV   [__r0],A
    0732: 47 19 80 TST   [__r0],0x80
    0735: AF F5    JZ    0x072B
(0182) 		//wait for 50 us
(0183) 	    LCD_Delay50u();
    0737: 10       PUSH  X
    0738: 7C 05 3F LCALL _LCD_Delay50u
    073B: 20       POP   X
(0184) 		//shift byte to the left
(0185) 		vercode = vercode << 1;
    073C: 66 06    ASL   [X+6]
(0186) 	    //read line
(0187) 		if ((PRT2DR & 0x80)==0x80) 
    073E: 5D 08    MOV   A,REG[0x8]
    0740: 62 D0 00 MOV   REG[0xD0],0x0
    0743: 53 19    MOV   [__r0],A
    0745: 26 19 80 AND   [__r0],0x80
    0748: 3C 19 80 CMP   [__r0],0x80
    074B: B0 0B    JNZ   0x0757
(0188) 			{//read 1, wait for another 50us
(0189) 			vercode |= 0x01;
    074D: 2F 06 01 OR    [X+6],0x1
(0190) 			LCD_Delay50u();
    0750: 10       PUSH  X
    0751: 7C 05 3F LCALL _LCD_Delay50u
    0754: 20       POP   X
(0191) 			}
    0755: 80 04    JMP   0x075A
(0192) 		else
(0193) 			{//read 0, go to next bit
(0194) 			vercode &= ~0x01;
    0757: 27 06 FE AND   [X+6],0xFE
(0195) 			}
(0196) 		}	
    075A: 77 01    INC   [X+1]
    075C: 0F 00 00 ADC   [X+0],0x0
    075F: 52 01    MOV   A,[X+1]
    0761: 11 08    SUB   A,0x8
    0763: 52 00    MOV   A,[X+0]
    0765: 19 00    SBB   A,0x0
    0767: CF C3    JC    0x072B
(0197) 		
(0198) 		if (vercode==rh+rh1+t+t1)
    0769: 62 D0 00 MOV   REG[0xD0],0x0
    076C: 52 02    MOV   A,[X+2]
    076E: 03 03    ADD   A,[X+3]
    0770: 53 19    MOV   [__r0],A
    0772: 52 04    MOV   A,[X+4]
    0774: 04 19    ADD   [__r0],A
    0776: 52 05    MOV   A,[X+5]
    0778: 04 19    ADD   [__r0],A
    077A: 52 06    MOV   A,[X+6]
    077C: 3A 19    CMP   A,[__r0]
    077E: B0 1B    JNZ   0x079A
(0199) 		{
(0200) 		scratchpad[0x00]=rh;
    0780: 52 02    MOV   A,[X+2]
    0782: 62 D0 00 MOV   REG[0xD0],0x0
    0785: 53 1A    MOV   [scratchpad],A
(0201) 		scratchpad[0x01]=rh1;
    0787: 52 03    MOV   A,[X+3]
    0789: 53 1B    MOV   [scratchpad+1],A
(0202) 		scratchpad[0x02]=t;
    078B: 52 04    MOV   A,[X+4]
    078D: 53 1C    MOV   [scratchpad+2],A
(0203) 		scratchpad[0x03]=t1;
    078F: 52 05    MOV   A,[X+5]
    0791: 53 1D    MOV   [scratchpad+3],A
(0204) 		return 1;
    0793: 62 D0 00 MOV   REG[0xD0],0x0
    0796: 50 01    MOV   A,0x1
    0798: 80 06    JMP   0x079F
(0205) 		}
(0206) 		}
(0207) 
(0208) 		return 0;
    079A: 62 D0 00 MOV   REG[0xD0],0x0
    079D: 50 00    MOV   A,0x0
    079F: 38 F4    ADD   SP,0xF4
    07A1: 20       POP   X
    07A2: 7F       RET   
(0209) }
(0210) 
(0211) /* Get sign of temperature from the Scratchpad data */
(0212) BOOL DHT22_GetTempSign(void)
(0213) {
(0214) 	/* if minus modify scratchpad, keep minus and rewrtie temp value*/
(0215) 	if ((scratchpad[TEMP_MSB] & SIGNMASK)==0x80)
_DHT22_GetTempSign:
    07A3: 62 D0 00 MOV   REG[0xD0],0x0
    07A6: 51 1C    MOV   A,[scratchpad+2]
    07A8: 21 80    AND   A,0x80
    07AA: 39 80    CMP   A,0x80
    07AC: B0 04    JNZ   0x07B1
(0216) 	{
(0217) 		scratchpad[TEMP_MSB] &=~SIGNMASK;
    07AE: 26 1C 7F AND   [scratchpad+2],0x7F
(0218) 	}
(0219) 	/* DHT22_GetTempSign returns:
(0220) 	 1 = Negative (<  0 C)
(0221) 	 0 = Positive (>= 0 C) */
(0222) 	return scratchpad[TEMP_MSB] & SIGNMASK;
    07B1: 62 D0 00 MOV   REG[0xD0],0x0
    07B4: 51 1C    MOV   A,[scratchpad+2]
    07B6: 21 80    AND   A,0x80
    07B8: 62 D0 00 MOV   REG[0xD0],0x0
    07BB: 7F       RET   
(0223) }
(0224) 
(0225) /* Calculate temperature value from the readback data */
(0226) WORD DHT22_CalculateTemp(void)
(0227) {
_DHT22_CalculateTemp:
  tempVal0             --> X+3
  tempVal1             --> X+2
  calcTemp             --> X+0
    07BC: 10       PUSH  X
    07BD: 4F       MOV   X,SP
    07BE: 38 04    ADD   SP,0x4
(0228) 	WORD calcTemp;
(0229) 	BYTE tempVal0 = scratchpad[TEMP_LSB];
    07C0: 62 D0 00 MOV   REG[0xD0],0x0
    07C3: 51 1D    MOV   A,[scratchpad+3]
    07C5: 54 03    MOV   [X+3],A
(0230) 	BYTE tempVal1 = scratchpad[TEMP_MSB];
    07C7: 51 1C    MOV   A,[scratchpad+2]
    07C9: 54 02    MOV   [X+2],A
(0231) 
(0232) 	/* Calculate temperature
(0233) 	   the resultant value is multiplied by SCALE_FACT to preserve decimal digits */
(0234) 	
(0235) 	calcTemp = (SCALE_FACT * tempVal1) >> 1;
    07CB: 62 D0 00 MOV   REG[0xD0],0x0
    07CE: 52 02    MOV   A,[X+2]
    07D0: 53 18    MOV   [__r1],A
    07D2: 50 00    MOV   A,0x0
    07D4: 08       PUSH  A
    07D5: 51 18    MOV   A,[__r1]
    07D7: 08       PUSH  A
    07D8: 50 00    MOV   A,0x0
    07DA: 08       PUSH  A
    07DB: 50 0A    MOV   A,0xA
    07DD: 08       PUSH  A
    07DE: 7C 0B 92 LCALL 0x0B92
    07E1: 38 FC    ADD   SP,0xFC
    07E3: 51 15    MOV   A,[__rX]
    07E5: 53 18    MOV   [__r1],A
    07E7: 51 14    MOV   A,[__rY]
    07E9: 53 19    MOV   [__r0],A
    07EB: 68 19    ASR   [__r0]
    07ED: 6E 18    RRC   [__r1]
    07EF: 51 18    MOV   A,[__r1]
    07F1: 54 01    MOV   [X+1],A
    07F3: 51 19    MOV   A,[__r0]
    07F5: 54 00    MOV   [X+0],A
(0236) 	calcTemp = (tempVal0 | (tempVal1 << 8));
    07F7: 52 02    MOV   A,[X+2]
    07F9: 53 19    MOV   [__r0],A
    07FB: 55 18 00 MOV   [__r1],0x0
    07FE: 52 03    MOV   A,[X+3]
    0800: 2A 18    OR    A,[__r1]
    0802: 53 18    MOV   [__r1],A
    0804: 50 00    MOV   A,0x0
    0806: 2A 19    OR    A,[__r0]
    0808: 53 19    MOV   [__r0],A
    080A: 51 18    MOV   A,[__r1]
    080C: 54 01    MOV   [X+1],A
    080E: 51 19    MOV   A,[__r0]
    0810: 54 00    MOV   [X+0],A
(0237) 
(0238) 	return calcTemp;
    0812: 52 01    MOV   A,[X+1]
    0814: 53 18    MOV   [__r1],A
    0816: 52 00    MOV   A,[X+0]
    0818: 53 19    MOV   [__r0],A
    081A: 38 FC    ADD   SP,0xFC
    081C: 20       POP   X
    081D: 7F       RET   
(0239) }
(0240) 
(0241) /* Calculate temperature value from the readback data */
(0242) WORD DHT22_CalculateRH(void)
(0243) {
_DHT22_CalculateRH:
  RHVal1               --> X+3
  RHVal0               --> X+2
  calcRH               --> X+0
    081E: 10       PUSH  X
    081F: 4F       MOV   X,SP
    0820: 38 04    ADD   SP,0x4
(0244) 	WORD calcRH;
(0245) 	BYTE RHVal0 = scratchpad[RH_LSB];
    0822: 62 D0 00 MOV   REG[0xD0],0x0
    0825: 51 1B    MOV   A,[scratchpad+1]
    0827: 54 02    MOV   [X+2],A
(0246) 	BYTE RHVal1 = scratchpad[RH_MSB];
    0829: 51 1A    MOV   A,[scratchpad]
    082B: 54 03    MOV   [X+3],A
(0247) 
(0248) 	/* Calculate temperature
(0249) 	   the resultant value is multiplied by SCALE_FACT to preserve decimal digits */
(0250) 	
(0251) 	calcRH = RHVal0 | (RHVal1 << 8);
    082D: 62 D0 00 MOV   REG[0xD0],0x0
    0830: 52 03    MOV   A,[X+3]
    0832: 53 19    MOV   [__r0],A
    0834: 55 18 00 MOV   [__r1],0x0
    0837: 52 02    MOV   A,[X+2]
    0839: 2A 18    OR    A,[__r1]
    083B: 53 18    MOV   [__r1],A
    083D: 50 00    MOV   A,0x0
    083F: 2A 19    OR    A,[__r0]
    0841: 53 19    MOV   [__r0],A
    0843: 51 18    MOV   A,[__r1]
    0845: 54 01    MOV   [X+1],A
    0847: 51 19    MOV   A,[__r0]
    0849: 54 00    MOV   [X+0],A
(0252) 	
(0253) 	return calcRH;
    084B: 52 01    MOV   A,[X+1]
    084D: 53 18    MOV   [__r1],A
    084F: 52 00    MOV   A,[X+0]
    0851: 53 19    MOV   [__r0],A
    0853: 38 FC    ADD   SP,0xFC
    0855: 20       POP   X
    0856: 7F       RET   
(0254) }
(0255) 
(0256) /* Display temp */
(0257) void DHT22_Display_Temp(WORD sensorVal)
(0258) {
_DHT22_Display_Temp:
  tmp                  --> X+0
  sensorVal            --> X-5
    0857: 10       PUSH  X
    0858: 4F       MOV   X,SP
    0859: 38 03    ADD   SP,0x3
(0259) 	char tmp[3];
(0260) 	LCD_PrCString("T=");
    085B: 10       PUSH  X
    085C: 50 01    MOV   A,0x1
    085E: 08       PUSH  A
    085F: 50 AA    MOV   A,0xAA
    0861: 5C       MOV   X,A
    0862: 18       POP   A
    0863: 7C 03 9C LCALL _LCD_PrCString
    0866: 20       POP   X
(0261) 	
(0262) 	//if sign minus then print "-"
(0263) 	if (DHT22_GetTempSign() == 1) {LCD_PrCString("-");} 
    0867: 9F 3A    CALL  _DHT22_GetTempSign
    0869: 62 D0 00 MOV   REG[0xD0],0x0
    086C: 39 01    CMP   A,0x1
    086E: B0 0D    JNZ   0x087C
    0870: 10       PUSH  X
    0871: 50 01    MOV   A,0x1
    0873: 08       PUSH  A
    0874: 50 A8    MOV   A,0xA8
    0876: 5C       MOV   X,A
    0877: 18       POP   A
    0878: 7C 03 9C LCALL _LCD_PrCString
    087B: 20       POP   X
(0264) 	
(0265) 	itoa(tmp,sensorVal/10,10);
    087C: 50 00    MOV   A,0x0
    087E: 08       PUSH  A
    087F: 50 0A    MOV   A,0xA
    0881: 08       PUSH  A
    0882: 62 D0 00 MOV   REG[0xD0],0x0
    0885: 50 00    MOV   A,0x0
    0887: 08       PUSH  A
    0888: 50 0A    MOV   A,0xA
    088A: 08       PUSH  A
    088B: 52 FB    MOV   A,[X-5]
    088D: 08       PUSH  A
    088E: 52 FC    MOV   A,[X-4]
    0890: 08       PUSH  A
    0891: 7C 0B 4E LCALL 0x0B4E
    0894: 18       POP   A
    0895: 53 18    MOV   [__r1],A
    0897: 18       POP   A
    0898: 38 FE    ADD   SP,0xFE
    089A: 08       PUSH  A
    089B: 51 18    MOV   A,[__r1]
    089D: 08       PUSH  A
    089E: 50 07    MOV   A,0x7
    08A0: 08       PUSH  A
    08A1: 10       PUSH  X
    08A2: 7C 0B D0 LCALL _itoa
    08A5: 38 FA    ADD   SP,0xFA
(0266) 	LCD_PrString(tmp);
    08A7: 62 D0 00 MOV   REG[0xD0],0x0
    08AA: 10       PUSH  X
    08AB: 50 07    MOV   A,0x7
    08AD: 08       PUSH  A
    08AE: 18       POP   A
    08AF: 7C 03 D8 LCALL _LCD_PrString
(0267) 	LCD_PrCString(".");
    08B2: 50 01    MOV   A,0x1
    08B4: 08       PUSH  A
    08B5: 50 A6    MOV   A,0xA6
    08B7: 5C       MOV   X,A
    08B8: 18       POP   A
    08B9: 7C 03 9C LCALL _LCD_PrCString
    08BC: 20       POP   X
(0268) 	itoa(tmp,sensorVal%10,10);
    08BD: 50 00    MOV   A,0x0
    08BF: 08       PUSH  A
    08C0: 50 0A    MOV   A,0xA
    08C2: 08       PUSH  A
    08C3: 62 D0 00 MOV   REG[0xD0],0x0
    08C6: 50 00    MOV   A,0x0
    08C8: 08       PUSH  A
    08C9: 50 0A    MOV   A,0xA
    08CB: 08       PUSH  A
    08CC: 52 FB    MOV   A,[X-5]
    08CE: 08       PUSH  A
    08CF: 52 FC    MOV   A,[X-4]
    08D1: 08       PUSH  A
    08D2: 7C 0B 4E LCALL 0x0B4E
    08D5: 38 FE    ADD   SP,0xFE
    08D7: 18       POP   A
    08D8: 53 18    MOV   [__r1],A
    08DA: 18       POP   A
    08DB: 08       PUSH  A
    08DC: 51 18    MOV   A,[__r1]
    08DE: 08       PUSH  A
    08DF: 50 07    MOV   A,0x7
    08E1: 08       PUSH  A
    08E2: 10       PUSH  X
    08E3: 7C 0B D0 LCALL _itoa
    08E6: 38 FA    ADD   SP,0xFA
(0269) 	LCD_PrString(tmp);
    08E8: 62 D0 00 MOV   REG[0xD0],0x0
    08EB: 10       PUSH  X
    08EC: 50 07    MOV   A,0x7
    08EE: 08       PUSH  A
    08EF: 18       POP   A
    08F0: 7C 03 D8 LCALL _LCD_PrString
(0270) 	LCD_PrCString("C");
    08F3: 50 01    MOV   A,0x1
    08F5: 08       PUSH  A
    08F6: 50 A4    MOV   A,0xA4
    08F8: 5C       MOV   X,A
    08F9: 18       POP   A
    08FA: 7C 03 9C LCALL _LCD_PrCString
    08FD: 20       POP   X
    08FE: 38 FD    ADD   SP,0xFD
    0900: 20       POP   X
    0901: 7F       RET   
(0271) }
(0272) 
(0273) /* Display RH */
(0274) void DHT22_Display_RH(WORD sensorVal)
(0275) {
_DHT22_Display_RH:
  tmp                  --> X+0
  sensorVal            --> X-5
    0902: 10       PUSH  X
    0903: 4F       MOV   X,SP
    0904: 38 03    ADD   SP,0x3
(0276) 	char tmp[3];
(0277) 	LCD_PrCString("RH=");
    0906: 10       PUSH  X
    0907: 50 01    MOV   A,0x1
    0909: 08       PUSH  A
    090A: 50 A0    MOV   A,0xA0
    090C: 5C       MOV   X,A
    090D: 18       POP   A
    090E: 7C 03 9C LCALL _LCD_PrCString
    0911: 20       POP   X
(0278) 	itoa(tmp,sensorVal/10,10);
    0912: 50 00    MOV   A,0x0
    0914: 08       PUSH  A
    0915: 50 0A    MOV   A,0xA
    0917: 08       PUSH  A
    0918: 62 D0 00 MOV   REG[0xD0],0x0
    091B: 50 00    MOV   A,0x0
    091D: 08       PUSH  A
    091E: 50 0A    MOV   A,0xA
    0920: 08       PUSH  A
    0921: 52 FB    MOV   A,[X-5]
    0923: 08       PUSH  A
    0924: 52 FC    MOV   A,[X-4]
    0926: 08       PUSH  A
    0927: 7C 0B 4E LCALL 0x0B4E
    092A: 18       POP   A
    092B: 53 18    MOV   [__r1],A
    092D: 18       POP   A
    092E: 38 FE    ADD   SP,0xFE
    0930: 08       PUSH  A
    0931: 51 18    MOV   A,[__r1]
    0933: 08       PUSH  A
    0934: 50 07    MOV   A,0x7
    0936: 08       PUSH  A
    0937: 10       PUSH  X
    0938: 7C 0B D0 LCALL _itoa
    093B: 38 FA    ADD   SP,0xFA
(0279) 	LCD_PrString(tmp);
    093D: 62 D0 00 MOV   REG[0xD0],0x0
    0940: 10       PUSH  X
    0941: 50 07    MOV   A,0x7
    0943: 08       PUSH  A
    0944: 18       POP   A
    0945: 7C 03 D8 LCALL _LCD_PrString
(0280) 	LCD_PrCString(".");
    0948: 50 01    MOV   A,0x1
    094A: 08       PUSH  A
    094B: 50 A6    MOV   A,0xA6
    094D: 5C       MOV   X,A
    094E: 18       POP   A
    094F: 7C 03 9C LCALL _LCD_PrCString
    0952: 20       POP   X
(0281) 	itoa(tmp,sensorVal%10,10);
    0953: 50 00    MOV   A,0x0
    0955: 08       PUSH  A
    0956: 50 0A    MOV   A,0xA
    0958: 08       PUSH  A
    0959: 62 D0 00 MOV   REG[0xD0],0x0
    095C: 50 00    MOV   A,0x0
    095E: 08       PUSH  A
    095F: 50 0A    MOV   A,0xA
    0961: 08       PUSH  A
    0962: 52 FB    MOV   A,[X-5]
    0964: 08       PUSH  A
    0965: 52 FC    MOV   A,[X-4]
    0967: 08       PUSH  A
    0968: 7C 0B 4E LCALL 0x0B4E
    096B: 38 FE    ADD   SP,0xFE
    096D: 18       POP   A
    096E: 53 18    MOV   [__r1],A
    0970: 18       POP   A
    0971: 08       PUSH  A
    0972: 51 18    MOV   A,[__r1]
    0974: 08       PUSH  A
    0975: 50 07    MOV   A,0x7
    0977: 08       PUSH  A
    0978: 10       PUSH  X
    0979: 7C 0B D0 LCALL _itoa
    097C: 38 FA    ADD   SP,0xFA
(0282) 	LCD_PrString(tmp);
    097E: 62 D0 00 MOV   REG[0xD0],0x0
    0981: 10       PUSH  X
    0982: 50 07    MOV   A,0x7
    0984: 08       PUSH  A
    0985: 18       POP   A
    0986: 7C 03 D8 LCALL _LCD_PrString
    0989: 20       POP   X
    098A: 38 FD    ADD   SP,0xFD
    098C: 20       POP   X
    098D: 7F       RET   
FILE: D:\ADRIAN~1\TASPRO~1\TASPRO~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"// PSoC API definitions for all User Modules
(0007) #include "stdio.h"
(0008) #include "dht22.h"
(0009) #define PORT_1_3 PRT1DR
(0010) 
(0011) void main(void)
(0012) {
_main:
  x                    --> X+4
  rh                   --> X+2
  temp                 --> X+0
    098E: 10       PUSH  X
    098F: 4F       MOV   X,SP
    0990: 38 05    ADD   SP,0x5
(0013) 	WORD temp = 0;
    0992: 56 01 00 MOV   [X+1],0x0
    0995: 56 00 00 MOV   [X+0],0x0
(0014) 	WORD rh = 0;
    0998: 56 03 00 MOV   [X+3],0x0
    099B: 56 02 00 MOV   [X+2],0x0
(0015) 	// M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0016) 	// Insert your main routine code here.
(0017) 	static unsigned int index;
(0018) 	BYTE x = 0;
    099E: 56 04 00 MOV   [X+4],0x0
(0019) 	/* Initializes LCD to use the multi-line 4-bit interface */
(0020) 	M8C_EnableGInt;
    09A1: 71 01    OR    F,0x1
(0021) 	LCD_Start();
    09A3: 10       PUSH  X
    09A4: 7C 04 AE LCALL _LCD_Start|_LCD_Init|LCD_Init|LCD_Start
    09A7: 20       POP   X
    09A8: 81 9E    JMP   0x0B47
(0022) 	
(0023) 	
(0024) 	
(0025) 	while (1) 
(0026) 	{
(0027) 		DHT22_Get_Temp();
    09AA: 7C 05 6F LCALL _DHT22_Get_Temp
    09AD: 62 D0 00 MOV   REG[0xD0],0x0
(0028) 		temp = DHT22_CalculateTemp();
    09B0: 7C 07 BC LCALL _DHT22_CalculateTemp
    09B3: 62 D0 00 MOV   REG[0xD0],0x0
    09B6: 51 18    MOV   A,[__r1]
    09B8: 54 01    MOV   [X+1],A
    09BA: 51 19    MOV   A,[__r0]
    09BC: 54 00    MOV   [X+0],A
(0029) 		
(0030) 		/*
(0031) 		LCD_Position(0, 0);
(0032) 		LCD_WriteData((x/100)+48);
(0033) 		
(0034) 		LCD_WriteData(((x/10)%10)+48);
(0035) 		
(0036) 		LCD_WriteData((x%10)+48);
(0037) 		
(0038) 		LCD_PrCString("T(hex)=");
(0039) 		LCD_PrHexInt(temp);
(0040) 		*/
(0041) 		LCD_Position(0, 0);
    09BE: 10       PUSH  X
    09BF: 50 00    MOV   A,0x0
    09C1: 57 00    MOV   X,0x0
    09C3: 7C 05 21 LCALL _LCD_Position
(0042) 		LCD_PrCString("T=");
    09C6: 50 01    MOV   A,0x1
    09C8: 08       PUSH  A
    09C9: 50 B3    MOV   A,0xB3
    09CB: 5C       MOV   X,A
    09CC: 18       POP   A
    09CD: 7C 03 9C LCALL _LCD_PrCString
    09D0: 20       POP   X
(0043) 		LCD_WriteData((temp/100)+48);
    09D1: 62 D0 00 MOV   REG[0xD0],0x0
    09D4: 50 00    MOV   A,0x0
    09D6: 08       PUSH  A
    09D7: 50 64    MOV   A,0x64
    09D9: 08       PUSH  A
    09DA: 52 00    MOV   A,[X+0]
    09DC: 08       PUSH  A
    09DD: 52 01    MOV   A,[X+1]
    09DF: 08       PUSH  A
    09E0: 7C 0B 4E LCALL 0x0B4E
    09E3: 18       POP   A
    09E4: 53 18    MOV   [__r1],A
    09E6: 18       POP   A
    09E7: 38 FE    ADD   SP,0xFE
    09E9: 06 18 30 ADD   [__r1],0x30
    09EC: 51 18    MOV   A,[__r1]
    09EE: 10       PUSH  X
    09EF: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
    09F2: 20       POP   X
(0044) 		LCD_WriteData(((temp/10)%10)+48);
    09F3: 62 D0 00 MOV   REG[0xD0],0x0
    09F6: 50 00    MOV   A,0x0
    09F8: 08       PUSH  A
    09F9: 50 0A    MOV   A,0xA
    09FB: 08       PUSH  A
    09FC: 52 00    MOV   A,[X+0]
    09FE: 08       PUSH  A
    09FF: 52 01    MOV   A,[X+1]
    0A01: 08       PUSH  A
    0A02: 7C 0B 4E LCALL 0x0B4E
    0A05: 18       POP   A
    0A06: 53 18    MOV   [__r1],A
    0A08: 18       POP   A
    0A09: 53 19    MOV   [__r0],A
    0A0B: 38 FE    ADD   SP,0xFE
    0A0D: 50 00    MOV   A,0x0
    0A0F: 08       PUSH  A
    0A10: 50 0A    MOV   A,0xA
    0A12: 08       PUSH  A
    0A13: 51 19    MOV   A,[__r0]
    0A15: 08       PUSH  A
    0A16: 51 18    MOV   A,[__r1]
    0A18: 08       PUSH  A
    0A19: 7C 0B 4E LCALL 0x0B4E
    0A1C: 38 FE    ADD   SP,0xFE
    0A1E: 18       POP   A
    0A1F: 53 18    MOV   [__r1],A
    0A21: 18       POP   A
    0A22: 06 18 30 ADD   [__r1],0x30
    0A25: 51 18    MOV   A,[__r1]
    0A27: 10       PUSH  X
    0A28: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
(0045) 		LCD_PrCString(".");
    0A2B: 50 01    MOV   A,0x1
    0A2D: 08       PUSH  A
    0A2E: 50 B1    MOV   A,0xB1
    0A30: 5C       MOV   X,A
    0A31: 18       POP   A
    0A32: 7C 03 9C LCALL _LCD_PrCString
    0A35: 20       POP   X
(0046) 		LCD_WriteData((temp%10)+48);
    0A36: 62 D0 00 MOV   REG[0xD0],0x0
    0A39: 50 00    MOV   A,0x0
    0A3B: 08       PUSH  A
    0A3C: 50 0A    MOV   A,0xA
    0A3E: 08       PUSH  A
    0A3F: 52 00    MOV   A,[X+0]
    0A41: 08       PUSH  A
    0A42: 52 01    MOV   A,[X+1]
    0A44: 08       PUSH  A
    0A45: 7C 0B 4E LCALL 0x0B4E
    0A48: 38 FE    ADD   SP,0xFE
    0A4A: 18       POP   A
    0A4B: 53 18    MOV   [__r1],A
    0A4D: 18       POP   A
    0A4E: 06 18 30 ADD   [__r1],0x30
    0A51: 51 18    MOV   A,[__r1]
    0A53: 10       PUSH  X
    0A54: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
(0047) 		LCD_WriteData(48);
    0A57: 50 30    MOV   A,0x30
    0A59: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
    0A5C: 20       POP   X
(0048) 		
(0049) 		rh = DHT22_CalculateRH();
    0A5D: 7C 08 1E LCALL _DHT22_CalculateRH
    0A60: 62 D0 00 MOV   REG[0xD0],0x0
    0A63: 51 18    MOV   A,[__r1]
    0A65: 54 03    MOV   [X+3],A
    0A67: 51 19    MOV   A,[__r0]
    0A69: 54 02    MOV   [X+2],A
(0050) 		//LCD_PrHexInt(rh);
(0051) 		LCD_Position(1, 0);
    0A6B: 10       PUSH  X
    0A6C: 57 00    MOV   X,0x0
    0A6E: 50 01    MOV   A,0x1
    0A70: 7C 05 21 LCALL _LCD_Position
(0052) 		LCD_PrCString("RH=");
    0A73: 50 01    MOV   A,0x1
    0A75: 08       PUSH  A
    0A76: 50 AD    MOV   A,0xAD
    0A78: 5C       MOV   X,A
    0A79: 18       POP   A
    0A7A: 7C 03 9C LCALL _LCD_PrCString
    0A7D: 20       POP   X
(0053) 		LCD_WriteData((rh/100)+48);
    0A7E: 62 D0 00 MOV   REG[0xD0],0x0
    0A81: 50 00    MOV   A,0x0
    0A83: 08       PUSH  A
    0A84: 50 64    MOV   A,0x64
    0A86: 08       PUSH  A
    0A87: 52 02    MOV   A,[X+2]
    0A89: 08       PUSH  A
    0A8A: 52 03    MOV   A,[X+3]
    0A8C: 08       PUSH  A
    0A8D: 7C 0B 4E LCALL 0x0B4E
    0A90: 18       POP   A
    0A91: 53 18    MOV   [__r1],A
    0A93: 18       POP   A
    0A94: 38 FE    ADD   SP,0xFE
    0A96: 06 18 30 ADD   [__r1],0x30
    0A99: 51 18    MOV   A,[__r1]
    0A9B: 10       PUSH  X
    0A9C: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
    0A9F: 20       POP   X
(0054) 		LCD_WriteData(((rh/10)%10)+48);
    0AA0: 62 D0 00 MOV   REG[0xD0],0x0
    0AA3: 50 00    MOV   A,0x0
    0AA5: 08       PUSH  A
    0AA6: 50 0A    MOV   A,0xA
    0AA8: 08       PUSH  A
    0AA9: 52 02    MOV   A,[X+2]
    0AAB: 08       PUSH  A
    0AAC: 52 03    MOV   A,[X+3]
    0AAE: 08       PUSH  A
    0AAF: 7C 0B 4E LCALL 0x0B4E
    0AB2: 18       POP   A
    0AB3: 53 18    MOV   [__r1],A
    0AB5: 18       POP   A
    0AB6: 53 19    MOV   [__r0],A
    0AB8: 38 FE    ADD   SP,0xFE
    0ABA: 50 00    MOV   A,0x0
    0ABC: 08       PUSH  A
    0ABD: 50 0A    MOV   A,0xA
    0ABF: 08       PUSH  A
    0AC0: 51 19    MOV   A,[__r0]
    0AC2: 08       PUSH  A
    0AC3: 51 18    MOV   A,[__r1]
    0AC5: 08       PUSH  A
    0AC6: 7C 0B 4E LCALL 0x0B4E
    0AC9: 38 FE    ADD   SP,0xFE
    0ACB: 18       POP   A
    0ACC: 53 18    MOV   [__r1],A
    0ACE: 18       POP   A
    0ACF: 06 18 30 ADD   [__r1],0x30
    0AD2: 51 18    MOV   A,[__r1]
    0AD4: 10       PUSH  X
    0AD5: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
(0055) 		LCD_PrCString(".");
    0AD8: 50 01    MOV   A,0x1
    0ADA: 08       PUSH  A
    0ADB: 50 B1    MOV   A,0xB1
    0ADD: 5C       MOV   X,A
    0ADE: 18       POP   A
    0ADF: 7C 03 9C LCALL _LCD_PrCString
    0AE2: 20       POP   X
(0056) 		LCD_WriteData((rh%10)+48);
    0AE3: 62 D0 00 MOV   REG[0xD0],0x0
    0AE6: 50 00    MOV   A,0x0
    0AE8: 08       PUSH  A
    0AE9: 50 0A    MOV   A,0xA
    0AEB: 08       PUSH  A
    0AEC: 52 02    MOV   A,[X+2]
    0AEE: 08       PUSH  A
    0AEF: 52 03    MOV   A,[X+3]
    0AF1: 08       PUSH  A
    0AF2: 7C 0B 4E LCALL 0x0B4E
    0AF5: 38 FE    ADD   SP,0xFE
    0AF7: 18       POP   A
    0AF8: 53 18    MOV   [__r1],A
    0AFA: 18       POP   A
    0AFB: 06 18 30 ADD   [__r1],0x30
    0AFE: 51 18    MOV   A,[__r1]
    0B00: 10       PUSH  X
    0B01: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
(0057) 		LCD_WriteData(48);
    0B04: 50 30    MOV   A,0x30
    0B06: 7C 03 EA LCALL _LCD_Write_Data|LCD_WriteData|_LCD_WriteData
    0B09: 20       POP   X
(0058) 		
(0059) 		/*LCD_1_PrHexInt(x);
(0060) 		x++;
(0061) 		PORT_1_3 ^= 0x08;*/
(0062) 		for (index = 0; index < 42000; index++)
    0B0A: 62 D0 00 MOV   REG[0xD0],0x0
    0B0D: 55 1F 00 MOV   [scratchpad+5],0x0
    0B10: 55 1E 00 MOV   [scratchpad+4],0x0
    0B13: 80 09    JMP   0x0B1D
(0063) 		{
(0064) 			
(0065) 		} 
    0B15: 62 D0 00 MOV   REG[0xD0],0x0
    0B18: 76 1F    INC   [scratchpad+5]
    0B1A: 0E 1E 00 ADC   [scratchpad+4],0x0
    0B1D: 62 D0 00 MOV   REG[0xD0],0x0
    0B20: 51 1F    MOV   A,[scratchpad+5]
    0B22: 62 D0 00 MOV   REG[0xD0],0x0
    0B25: 53 16    MOV   [__r3],A
    0B27: 62 D0 00 MOV   REG[0xD0],0x0
    0B2A: 51 1E    MOV   A,[scratchpad+4]
    0B2C: 62 D0 00 MOV   REG[0xD0],0x0
    0B2F: 53 17    MOV   [__r2],A
    0B31: 51 16    MOV   A,[__r3]
    0B33: 11 10    SUB   A,0x10
    0B35: 51 17    MOV   A,[__r2]
    0B37: 19 A4    SBB   A,0xA4
    0B39: 50 00    MOV   A,0x0
    0B3B: 19 00    SBB   A,0x0
    0B3D: 50 00    MOV   A,0x0
    0B3F: 31 80    XOR   A,0x80
    0B41: 19 80    SBB   A,0x80
    0B43: CF D1    JC    0x0B15
(0066) 		x++;
    0B45: 77 04    INC   [X+4]
(0067) 	}
    0B47: 8E 62    JMP   0x09AA
(0068) 	
(0069) }
    0B49: 38 FB    ADD   SP,0xFB
    0B4B: 20       POP   X
    0B4C: 8F FF    JMP   0x0B4C
_itoa:
    0BD0: 10       PUSH  X
    0BD1: 4F       MOV   X,SP
    0BD2: 38 09    ADD   SP,0x9
    0BD4: 52 FA    MOV   A,[X-6]
    0BD6: 54 03    MOV   [X+3],A
    0BD8: 52 F9    MOV   A,[X-7]
    0BDA: 54 02    MOV   [X+2],A
    0BDC: 3D F9 00 CMP   [X-7],0x0
    0BDF: B0 2F    JNZ   0x0C0F
    0BE1: 3D FA 00 CMP   [X-6],0x0
    0BE4: B0 2A    JNZ   0x0C0F
    0BE6: 62 D0 00 MOV   REG[0xD0],0x0
    0BE9: 52 FC    MOV   A,[X-4]
    0BEB: 53 18    MOV   [__r1],A
    0BED: 52 FB    MOV   A,[X-5]
    0BEF: 60 D5    MOV   REG[0xD5],A
    0BF1: 50 30    MOV   A,0x30
    0BF3: 3F 18    MVI   [__r1],A
    0BF5: 52 FC    MOV   A,[X-4]
    0BF7: 01 01    ADD   A,0x1
    0BF9: 53 18    MOV   [__r1],A
    0BFB: 52 FB    MOV   A,[X-5]
    0BFD: 09 00    ADC   A,0x0
    0BFF: 60 D5    MOV   REG[0xD5],A
    0C01: 50 00    MOV   A,0x0
    0C03: 3F 18    MVI   [__r1],A
    0C05: 52 FC    MOV   A,[X-4]
    0C07: 53 18    MOV   [__r1],A
    0C09: 52 FB    MOV   A,[X-5]
    0C0B: 53 19    MOV   [__r0],A
    0C0D: 81 97    JMP   0x0DA5
    0C0F: 52 FA    MOV   A,[X-6]
    0C11: 11 00    SUB   A,0x0
    0C13: 52 F9    MOV   A,[X-7]
    0C15: 31 80    XOR   A,0x80
    0C17: 19 80    SBB   A,0x80
    0C19: D0 29    JNC   0x0C43
    0C1B: 3D F7 00 CMP   [X-9],0x0
    0C1E: B0 24    JNZ   0x0C43
    0C20: 3D F8 0A CMP   [X-8],0xA
    0C23: B0 1F    JNZ   0x0C43
    0C25: 56 06 01 MOV   [X+6],0x1
    0C28: 62 D0 00 MOV   REG[0xD0],0x0
    0C2B: 52 03    MOV   A,[X+3]
    0C2D: 73       CPL   A
    0C2E: 53 18    MOV   [__r1],A
    0C30: 52 02    MOV   A,[X+2]
    0C32: 73       CPL   A
    0C33: 53 19    MOV   [__r0],A
    0C35: 51 18    MOV   A,[__r1]
    0C37: 01 01    ADD   A,0x1
    0C39: 54 03    MOV   [X+3],A
    0C3B: 51 19    MOV   A,[__r0]
    0C3D: 09 00    ADC   A,0x0
    0C3F: 54 02    MOV   [X+2],A
    0C41: 80 04    JMP   0x0C46
    0C43: 56 06 00 MOV   [X+6],0x0
    0C46: 52 FC    MOV   A,[X-4]
    0C48: 54 01    MOV   [X+1],A
    0C4A: 52 FB    MOV   A,[X-5]
    0C4C: 54 00    MOV   [X+0],A
    0C4E: 62 D0 00 MOV   REG[0xD0],0x0
    0C51: 52 F7    MOV   A,[X-9]
    0C53: 08       PUSH  A
    0C54: 52 F8    MOV   A,[X-8]
    0C56: 08       PUSH  A
    0C57: 52 02    MOV   A,[X+2]
    0C59: 08       PUSH  A
    0C5A: 52 03    MOV   A,[X+3]
    0C5C: 08       PUSH  A
    0C5D: 7C 0B 4E LCALL 0x0B4E
    0C60: 38 FE    ADD   SP,0xFE
    0C62: 18       POP   A
    0C63: 53 18    MOV   [__r1],A
    0C65: 18       POP   A
    0C66: 53 19    MOV   [__r0],A
    0C68: 51 18    MOV   A,[__r1]
    0C6A: 54 08    MOV   [X+8],A
    0C6C: 51 19    MOV   A,[__r0]
    0C6E: 54 07    MOV   [X+7],A
    0C70: 50 09    MOV   A,0x9
    0C72: 13 08    SUB   A,[X+8]
    0C74: 52 07    MOV   A,[X+7]
    0C76: 31 80    XOR   A,0x80
    0C78: 53 15    MOV   [__rX],A
    0C7A: 50 80    MOV   A,0x80
    0C7C: 1A 15    SBB   A,[__rX]
    0C7E: C0 28    JC    0x0CA7
    0C80: 62 D0 00 MOV   REG[0xD0],0x0
    0C83: 52 01    MOV   A,[X+1]
    0C85: 53 18    MOV   [__r1],A
    0C87: 52 00    MOV   A,[X+0]
    0C89: 53 19    MOV   [__r0],A
    0C8B: 51 18    MOV   A,[__r1]
    0C8D: 01 01    ADD   A,0x1
    0C8F: 54 01    MOV   [X+1],A
    0C91: 51 19    MOV   A,[__r0]
    0C93: 09 00    ADC   A,0x0
    0C95: 54 00    MOV   [X+0],A
    0C97: 52 08    MOV   A,[X+8]
    0C99: 01 30    ADD   A,0x30
    0C9B: 53 17    MOV   [__r2],A
    0C9D: 51 19    MOV   A,[__r0]
    0C9F: 60 D5    MOV   REG[0xD5],A
    0CA1: 51 17    MOV   A,[__r2]
    0CA3: 3F 18    MVI   [__r1],A
    0CA5: 80 26    JMP   0x0CCC
    0CA7: 62 D0 00 MOV   REG[0xD0],0x0
    0CAA: 52 01    MOV   A,[X+1]
    0CAC: 53 18    MOV   [__r1],A
    0CAE: 52 00    MOV   A,[X+0]
    0CB0: 53 19    MOV   [__r0],A
    0CB2: 51 18    MOV   A,[__r1]
    0CB4: 01 01    ADD   A,0x1
    0CB6: 54 01    MOV   [X+1],A
    0CB8: 51 19    MOV   A,[__r0]
    0CBA: 09 00    ADC   A,0x0
    0CBC: 54 00    MOV   [X+0],A
    0CBE: 52 08    MOV   A,[X+8]
    0CC0: 01 57    ADD   A,0x57
    0CC2: 53 17    MOV   [__r2],A
    0CC4: 51 19    MOV   A,[__r0]
    0CC6: 60 D5    MOV   REG[0xD5],A
    0CC8: 51 17    MOV   A,[__r2]
    0CCA: 3F 18    MVI   [__r1],A
    0CCC: 52 F7    MOV   A,[X-9]
    0CCE: 08       PUSH  A
    0CCF: 52 F8    MOV   A,[X-8]
    0CD1: 08       PUSH  A
    0CD2: 52 02    MOV   A,[X+2]
    0CD4: 08       PUSH  A
    0CD5: 52 03    MOV   A,[X+3]
    0CD7: 08       PUSH  A
    0CD8: 62 D0 00 MOV   REG[0xD0],0x0
    0CDB: 7C 0B 4E LCALL 0x0B4E
    0CDE: 18       POP   A
    0CDF: 54 03    MOV   [X+3],A
    0CE1: 18       POP   A
    0CE2: 54 02    MOV   [X+2],A
    0CE4: 38 FE    ADD   SP,0xFE
    0CE6: 3D 02 00 CMP   [X+2],0x0
    0CE9: BF 64    JNZ   0x0C4E
    0CEB: 3D 03 00 CMP   [X+3],0x0
    0CEE: BF 5F    JNZ   0x0C4E
    0CF0: 3D 06 00 CMP   [X+6],0x0
    0CF3: A0 20    JZ    0x0D14
    0CF5: 62 D0 00 MOV   REG[0xD0],0x0
    0CF8: 52 01    MOV   A,[X+1]
    0CFA: 53 18    MOV   [__r1],A
    0CFC: 52 00    MOV   A,[X+0]
    0CFE: 53 19    MOV   [__r0],A
    0D00: 51 18    MOV   A,[__r1]
    0D02: 01 01    ADD   A,0x1
    0D04: 54 01    MOV   [X+1],A
    0D06: 51 19    MOV   A,[__r0]
    0D08: 09 00    ADC   A,0x0
    0D0A: 54 00    MOV   [X+0],A
    0D0C: 51 19    MOV   A,[__r0]
    0D0E: 60 D5    MOV   REG[0xD5],A
    0D10: 50 2D    MOV   A,0x2D
    0D12: 3F 18    MVI   [__r1],A
    0D14: 62 D0 00 MOV   REG[0xD0],0x0
    0D17: 52 01    MOV   A,[X+1]
    0D19: 53 18    MOV   [__r1],A
    0D1B: 52 00    MOV   A,[X+0]
    0D1D: 53 19    MOV   [__r0],A
    0D1F: 51 18    MOV   A,[__r1]
    0D21: 01 FF    ADD   A,0xFF
    0D23: 54 01    MOV   [X+1],A
    0D25: 51 19    MOV   A,[__r0]
    0D27: 09 FF    ADC   A,0xFF
    0D29: 54 00    MOV   [X+0],A
    0D2B: 51 19    MOV   A,[__r0]
    0D2D: 60 D5    MOV   REG[0xD5],A
    0D2F: 50 00    MOV   A,0x0
    0D31: 3F 18    MVI   [__r1],A
    0D33: 52 FC    MOV   A,[X-4]
    0D35: 54 05    MOV   [X+5],A
    0D37: 52 FB    MOV   A,[X-5]
    0D39: 54 04    MOV   [X+4],A
    0D3B: 80 54    JMP   0x0D90
    0D3D: 62 D0 00 MOV   REG[0xD0],0x0
    0D40: 52 05    MOV   A,[X+5]
    0D42: 53 18    MOV   [__r1],A
    0D44: 52 04    MOV   A,[X+4]
    0D46: 60 D4    MOV   REG[0xD4],A
    0D48: 3E 18    MVI   A,[__r1]
    0D4A: 54 06    MOV   [X+6],A
    0D4C: 52 05    MOV   A,[X+5]
    0D4E: 53 18    MOV   [__r1],A
    0D50: 52 04    MOV   A,[X+4]
    0D52: 53 19    MOV   [__r0],A
    0D54: 51 18    MOV   A,[__r1]
    0D56: 01 01    ADD   A,0x1
    0D58: 54 05    MOV   [X+5],A
    0D5A: 51 19    MOV   A,[__r0]
    0D5C: 09 00    ADC   A,0x0
    0D5E: 54 04    MOV   [X+4],A
    0D60: 52 01    MOV   A,[X+1]
    0D62: 53 16    MOV   [__r3],A
    0D64: 52 00    MOV   A,[X+0]
    0D66: 60 D4    MOV   REG[0xD4],A
    0D68: 3E 16    MVI   A,[__r3]
    0D6A: 53 17    MOV   [__r2],A
    0D6C: 51 19    MOV   A,[__r0]
    0D6E: 60 D5    MOV   REG[0xD5],A
    0D70: 51 17    MOV   A,[__r2]
    0D72: 3F 18    MVI   [__r1],A
    0D74: 52 01    MOV   A,[X+1]
    0D76: 53 18    MOV   [__r1],A
    0D78: 52 00    MOV   A,[X+0]
    0D7A: 53 19    MOV   [__r0],A
    0D7C: 51 18    MOV   A,[__r1]
    0D7E: 01 FF    ADD   A,0xFF
    0D80: 54 01    MOV   [X+1],A
    0D82: 51 19    MOV   A,[__r0]
    0D84: 09 FF    ADC   A,0xFF
    0D86: 54 00    MOV   [X+0],A
    0D88: 51 19    MOV   A,[__r0]
    0D8A: 60 D5    MOV   REG[0xD5],A
    0D8C: 52 06    MOV   A,[X+6]
    0D8E: 3F 18    MVI   [__r1],A
    0D90: 52 05    MOV   A,[X+5]
    0D92: 13 01    SUB   A,[X+1]
    0D94: 52 04    MOV   A,[X+4]
    0D96: 1B 00    SBB   A,[X+0]
    0D98: CF A4    JC    0x0D3D
    0D9A: 62 D0 00 MOV   REG[0xD0],0x0
    0D9D: 52 FC    MOV   A,[X-4]
    0D9F: 53 18    MOV   [__r1],A
    0DA1: 52 FB    MOV   A,[X-5]
    0DA3: 53 19    MOV   [__r0],A
    0DA5: 38 F7    ADD   SP,0xF7
    0DA7: 20       POP   X
    0DA8: 7F       RET   
